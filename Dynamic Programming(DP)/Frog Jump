//memoiztion
#include <bits/stdc++.h>
int frog(int n,vector<int> &heights,vector<int>&dp){
        if(n==0) return 0;
    if(dp[n]!=-1) return dp[n];
        int left= frog(n-1,heights,dp) + abs(heights[n]-heights[n-1]);
        int right = INT_MAX;
    if(n>1)
        right = frog(n-2,heights,dp) + abs(heights[n]-heights[n-2]);
    return dp[n]=min(left,right);
}
int frogJump(int n, vector<int> &heights)
{
   vector<int>dp(n+1,-1);
    return frog(n-1,heights,dp);    
}

//tabulation
int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n,0);
    dp[0] = 0;
    
    for(int i=1; i<n; i++){
          int left = dp[i-1] + abs(heights[i]-heights[i-1]);
          int right = INT_MAX; 
        if(i>1)
          right = dp[i-2] + abs(heights[i]-heights[i-2]);
        
        dp[i] = min(left,right);
    }
    return dp[n-1];
}

//Space optimization
#include <bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    int prev=0;
    int prev1 = 0;
     for(int i=1; i<n; i++){
         int left = prev + abs(heights[i]-heights[i-1]);
         int right =INT_MAX;
         if(i>1)
         right = prev1 + abs(heights[i]-heights[i-2]);
         int curr = min(left,right);
         prev1 = prev;
         prev = curr;
     }
     return prev; 
}

